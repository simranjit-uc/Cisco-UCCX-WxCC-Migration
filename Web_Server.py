import socket, ssl
from urllib.parse import urlparse, parse_qs
import urllib.parse


HOST = 'localhost'
PORT = 5963  # Can be any available port
CLIENT_HOST = 'localhost'
CLIENT_PORT = 5001  # Port where the client is listening for the authorization code

# Read the saved state from the file. This was generated by the Client file.
def read_state():
    with open('state.txt', 'r') as f:
        return f.read().strip()


# Handle incoming HTTP requests and extract the authorization code
def handle_request(client_socket):
    try:
        request = client_socket.recv(1024).decode()

        # Check if the redirect contains the authorization code
        if 'GET /?code' in request:
            # Extracting the authorization code from the URL
            #parsed_url = urlparse(path)
            print(request)
            parsed_url = urllib.parse.urlparse(request)
            query_params = urllib.parse.parse_qs(parsed_url.query)
            auth_Code = query_params['code'][0]
            state = query_params['state'][0]
            s_dict = state.split(' ')
            state = s_dict[0]

            if auth_Code:
                print(f"Authorization code received: {auth_Code}")
                print(f"State is : {state}")
                msg = f"{auth_Code} | {state}"

                # Sending the authorization code to the client via a socket
                client_socket_send = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                client_socket_send.connect((CLIENT_HOST, CLIENT_PORT))
                client_socket_send.sendall(msg.encode())
                client_socket_send.close()

                # Sending response back to the browser.
                client_socket.sendall(
                    b'HTTP/1.1 200 OK\r\n'
                    b'Content-Type: text/html\r\n\r\n'
                    b'<html><body><h1>Authentication is successful! You can close this window.</h1></body></html>'
                )
        client_socket.close()
    except Exception as e:
        print(f"Error handling request: {e}")
        client_socket.close()

# Start the server to listen for incoming connections
def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(1)

    print(f"Server listening on https://{HOST}:{PORT} ...")

    # Communication with WxCC Auth server is SSL based. So, need to have local certificates in place.
    # You can use OpenSSL to generate the local self signed certificate.
    server_socket = ssl.wrap_socket(
        server_socket,
        keyfile = r"path-to-private.key",  # Path to the private key
        certfile = r"path-to-certificate.pem",  # Path to the certificate
        server_side=True
    )

    while True:
        client_socket, client_address = server_socket.accept()
        print(f"Connection from {client_address}")
        handle_request(client_socket)


if __name__ == '__main__':
    start_server()
